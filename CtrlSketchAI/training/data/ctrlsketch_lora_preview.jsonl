{"input": "What does the following code do? \n\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\nimport './styles/main.css'\nimport './styles/glossy.css'\nimport './assets/tool-cursors.css'\n\nconst app = createApp(App)\nconst pinia = createPinia()\napp.use(pinia)\napp.mount('#app')", "output": "This code is from `main.js`. It defines part of the logic for CtrlSketch. (Explanation placeholder)"}
{"input": "What does the following code do? \n\nexport default {\n  name: 'AddPageDialog',\n  props: {\n    show: { type: Boolean, default: false },\n    initialData: {\n      type: Object,\n      default: () => ({\n        name: '',\n        type: 'foreground',\n        backgroundPageId: '',\n        description: '',\n        drawingType: 'default'\n      })\n    },\n    backgroundPages: { type: Array, default: () => [] },\n    isDarkTheme: { type: Boolean, default: false }\n  },\n  data() {\n    return {\n      pageData: { ...this.initialData }\n    };\n  },\n  watch: {\n    initialData: {\n      handler(newVal) {\n        this.pageData = { ...newVal };\n      },\n      deep: true\n    }\n  },\n  methods: {\n    addPage() {\n      if (!this.pageData.name.trim()) {\n        alert('Page name cannot be empty');\n        return;\n      }\n      this.$emit('add', { ...this.pageData });\n      this.$emit('close');\n    }\n  }\n};", "output": "This code is from `AddPageDialog.vue`. It defines part of the logic for CtrlSketch. (Explanation placeholder)"}
{"input": "What does the following code do? \n\nexport default {\n  name: 'DragHelper',\n  data() {\n    return {\n      dragData: null\n    };\n  },\n  methods: {\n    /**\n     * Initialize the drag helper\n     */\n    initialize() {\n      const dragHelper = this.$refs.dragHelper;\n      dragHelper.addEventListener('dragstart', this.handleDragStart);\n      dragHelper.addEventListener('dragend', this.handleDragEnd);\n    },\n    \n    /**\n     * Start a drag operation\n     * @param {Object} data - The data to be dragged\n     * @param {Event} event - The original event that triggered the drag\n     */\n    startDrag(data, event) {\n      console.log('DragHelper: Starting drag with data:', data);\n      this.dragData = data;\n      \n      const dragHelper = this.$refs.dragHelper;\n      dragHelper.style.display = 'block';\n      dragHelper.style.top = (event.clientY - 10) + 'px';\n      dragHelper.style.left = (event.clientX - 10) + 'px';\n      \n      // Trigger the drag programmatically\n      setTimeout(() => {\n        dragHelper.dispatchEvent(new MouseEvent('dragstart', {\n          bubbles: true,\n          cancelable: true,\n          view: window\n        }));\n      }, 10);\n    },\n    \n    /**\n     * Handle the dragstart event\n     * @param {DragEvent} event - The drag event\n     */\n    handleDragStart(event) {\n      console.log('DragHelper: Drag started');\n      if (!this.dragData) return;\n      \n      try {\n        // Set the drag data\n        event.dataTransfer.setData('application/json', JSON.stringify(this.dragData));\n        \n        // Create a drag image\n        const dragImage = document.createElement('div');\n        dragImage.textContent = this.dragData.shape ? this.dragData.shape.type : 'Shape';\n        dragImage.style.padding = '10px';\n        dragImage.style.background = '#3B82F6';\n        dragImage.style.color = 'white';\n        dragImage.style.borderRadius = '4px';\n        dragImage.style.position = 'absolute';\n        dragImage.style.top = '-1000px';\n        document.body.appendChild(dragImage);\n        \n        // Set the drag image\n        event.dataTransfer.setDragImage(dragImage, 25, 25);\n        \n        // Clean up the drag image after a short delay\n        setTimeout(() => {\n          document.body.removeChild(dragImage);\n        }, 100);\n        \n        // Set the allowed effects\n        event.dataTransfer.effectAllowed = 'copy';\n      } catch (error) {\n        console.error('DragHelper: Error setting drag data:', error);\n      }\n    },\n    \n    /**\n     * Handle the dragend event\n     */\n    handleDragEnd() {\n      console.log('DragHelper: Drag ended');\n      const dragHelper = this.$refs.dragHelper;\n      dragHelper.style.display = 'none';\n      this.dragData = null;\n    }\n  },\n  mounted() {\n    this.initialize();\n  },\n  beforeUnmount() {\n    const dragHelper = this.$refs.dragHelper;\n    if (dragHelper) {\n      dragHelper.removeEventListener('dragstart', this.handleDragStart);\n      dragHelper.removeEventListener('dragend', this.handleDragEnd);\n    }\n  }\n};", "output": "This code is from `DragHelper.vue`. It defines part of the logic for CtrlSketch. (Explanation placeholder)"}
