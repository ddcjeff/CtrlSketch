{'instruction': 'How does CtrlSketch handle shape dragging?', 'input': '', 'output': "CtrlSketch attaches mousedown, mousemove, and mouseup event listeners to each shape. These events update the shape's coordinates in real-time and synchronize with the canvasStore. The canvas re-renders the shape based on its new position."}
{'instruction': 'What does the canvasStore manage in CtrlSketch?', 'input': '', 'output': 'The canvasStore manages the current drawing tool, shape metadata, zoom level, and selected shape state. It acts as a centralized reactive store that broadcasts updates to the canvas and properties panel.'}
{'instruction': 'Write a Vue Composition API snippet that updates shape x/y position on drag.', 'input': '', 'output': "<script setup>\nimport { ref } from 'vue'\n\nconst posX = ref(100)\nconst posY = ref(100)\n\nfunction handleMouseMove(event) {\n  posX.value = event.clientX\n  posY.value = event.clientY\n}\n</script>"}
{'instruction': 'How do properties appear when a shape is right-clicked in CtrlSketch?', 'input': '', 'output': 'When a shape is right-clicked, an event is emitted with its ID. The canvasStore sets this shape as the active selection. The properties panel listens for changes to the selected shape and opens with its metadata populated.'}
{'instruction': 'What is the drawing tool in CtrlSketch and how is it activated?', 'input': '', 'output': "The drawing tool in CtrlSketch is activated by selecting a shape type from the toolbar. This updates the canvasStore's `currentTool` value, which changes how mouse events are handled in the CanvasWorkspace.vue file."}
{'instruction': 'How does CtrlSketch detect when a user starts drawing?', 'input': '', 'output': 'When a user clicks on the canvas and a tool is selected, CtrlSketch registers the `mousedown` event and records the starting coordinates. This is handled in CanvasWorkspace.vue using reactive mouse state logic.'}
{'instruction': 'How does the canvas track the shape being drawn?', 'input': '', 'output': 'While the user holds the mouse button, `mousemove` events are used to dynamically update the width and height of the temporary shape. The values are stored in local reactive state or in canvasStore.'}
{'instruction': 'How does CtrlSketch snap shapes to the grid?', 'input': '', 'output': 'If grid snapping is enabled, the coordinates of the mouse events are snapped to the nearest interval defined in canvasStore (e.g. 1/4 inch). This logic is applied during shape creation and movement.'}
{'instruction': 'Where is the shape metadata assigned during drawing?', 'input': '', 'output': 'Shape metadata such as `tag`, `pointType`, and `description` is assigned after the shape is created and selected. The properties panel allows users to update this data, which is stored in the shape object inside canvasStore.'}
{'instruction': 'How do shapes get their unique ID in CtrlSketch?', 'input': '', 'output': 'When a shape is created, CtrlSketch generates a unique ID using a counter or UUID generator. This ID is used for selection, updates, and identification in the BOM system.'}
